"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
const propertyPriority = [
    '$key',
    'primitives',
    'objects',
    'dictionaries',
    'compounds',
    'choices',
    'name',
    'schemas',
    'type',
    'format',
    'schema',
    'operationId',
    'path',
    'method',
    'description',
    'default',
];
const propertyNegativePriority = [
    'request',
    'responses',
    'exceptions',
    'callbacks',
    'http',
    'commands',
    'operations',
    'extensions',
    'details',
    'language',
    'protocol'
];
function sortWithPriorty(a, b) {
    if (a == b) {
        return 0;
    }
    const ia = propertyPriority.indexOf(a);
    const ib = propertyPriority.indexOf(b);
    const na = propertyNegativePriority.indexOf(a);
    const nb = propertyNegativePriority.indexOf(b);
    const dota = `${a}`.startsWith('.');
    const dotb = `${b}`.startsWith('.');
    if (dota) {
        if (!dotb) {
            return 1;
        }
    }
    else {
        if (dotb) {
            return -1;
        }
    }
    if (na > -1) {
        if (nb > -1) {
            return na - nb;
        }
        return 1;
    }
    if (nb > -1) {
        return -1;
    }
    if (ia != -1) {
        return ib != -1 ? ia - ib : -1;
    }
    return ib != -1 || a > b ? 1 : a < b ? -1 : 0;
}
function deserialize(text, filename, schema = js_yaml_1.DEFAULT_SAFE_SCHEMA) {
    return js_yaml_1.safeLoad(text, {
        schema,
        filename,
    });
}
exports.deserialize = deserialize;
function serialize(model, schema = js_yaml_1.DEFAULT_SAFE_SCHEMA) {
    return js_yaml_1.dump(model, {
        schema: schema,
        sortKeys: sortWithPriorty,
        skipInvalid: true,
        noArrayIndent: true,
        lineWidth: 240,
    });
    // .replace(/\s*\w*: {}/g, '')
    // .replace(/\s*\w*: \[\]/g, '')
    // .replace(/(\s*- \$key:)/g, '\n$1')
    // .replace(/-\n\s+version/g, '- version');
    // .replace(/(\s*)(language:)/g, '\n$1## ----------------------------------------------------------------------$1$2')
    // replace(/([^:]\n)(\s*-)/g, '$1\n$2')
    //.replace(/(\s*language:)/g, '\n$1');
}
exports.serialize = serialize;
//# sourceMappingURL=yaml.js.map